from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from difflib import get_close_matches
from bot.states import QuestionState
from bot.gemini_handler import GeminiHandler
from aiogram.types import CallbackQuery
from bot.middlewares import RateLimiter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import asyncio

from responses_templates import book_prompts, PROMPT

from bot.config import parse_args
args = parse_args()
api_keys = args.gemini_api_keys
gemini_handler = GeminiHandler(api_keys)

app_password = args.gmail_app_password

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SENDER_EMAIL = args.gmail_login  # Gmail login
SENDER_PASSWORD = app_password  # Gmail App Password
RECEIVER_EMAIL = args.receivers_email

import logging

question_router = Router()

def create_navigation_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="go_back"),
         InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def create_rating_keyboard():
    buttons = [
        [InlineKeyboardButton(text="üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ –∫–Ω–∏–≥–µ", callback_data="continue_book")],
        [
            InlineKeyboardButton(text="1", callback_data="rate_1"),
            InlineKeyboardButton(text="2", callback_data="rate_2"),
            InlineKeyboardButton(text="3", callback_data="rate_3"),
            InlineKeyboardButton(text="4", callback_data="rate_4"),
            InlineKeyboardButton(text="5", callback_data="rate_5"),
        ],
        [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="add_comment")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@question_router.message(Command("question"), RateLimiter(limit=5, period=60))
async def ask_book(message: types.Message, state: FSMContext):
    try:
        book_list_markdown = "\n".join(f"- {book}" for book in book_prompts.keys())
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n{book_list_markdown}", reply_markup=create_navigation_keyboard(), parse_mode="Markdown")
        await state.set_state(QuestionState.waiting_for_book)
        logging.info("/question handled")
    except Exception as e:
        logging.exception(f"Error in /question: {e}")

@question_router.message(QuestionState.waiting_for_book, RateLimiter(limit=5, period=60))
async def save_book(message: types.Message, state: FSMContext):
    try:
        book_input = message.text.strip()
        closest_match = get_close_matches(book_input, book_prompts.keys(), n=1, cutoff=0.7)
        if not closest_match:
            await message.answer("–ö–Ω–∏–≥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")
            await state.clear()
            return

        book_key = closest_match[0]
        await state.update_data(book=book_key)
        await message.answer(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n{book_prompts[book_key]}", reply_markup=create_navigation_keyboard())
        await state.set_state(QuestionState.waiting_for_question)
        logging.info(f"Book selected: {book_key}")
    except Exception as e:
        logging.exception(f"Error in save_book: {e}")

@question_router.message(QuestionState.waiting_for_question, RateLimiter(limit=5, period=60))
async def save_question(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        book = user_data.get("book")
        if not book:
            await message.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /question")
            await state.clear()
            return

        question = message.text.strip()
        if len(question) > 1000:
            await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            await state.clear()
            return

        logging.info(f"User {message.from_user.id} asked: {question[:100]}... about {book}")

        await message.answer(f"‚è≥ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

        response = await gemini_handler.generate_response(book, question)
        await state.update_data(question=question, response=response)

        if not response or len(response) > 4000:
            response = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

        try:
            await message.answer(
                f"üìö –û—Ç–≤–µ—Ç –ø–æ –∫–Ω–∏–≥–µ *{book}*:\n\n{response}\n\n–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç—É:",
                parse_mode="Markdown",
                reply_markup=create_rating_keyboard()
            )
        except Exception as e:
            logging.error(f"Error for user {message.from_user.id}: {str(e)}\nParse mode set 'HTML'")
            await message.answer(
                f"üìö –û—Ç–≤–µ—Ç –ø–æ –∫–Ω–∏–≥–µ <b>{book}</b>:\n\n{response}\n\n–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç—É:",
                parse_mode="HTML",
                reply_markup=create_rating_keyboard()
            )

    except Exception as e:
        logging.error(f"Error for user {message.from_user.id}: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
    finally:
        # await state.clear()
        pass

@question_router.callback_query(F.data == "continue_book")
async def handle_continue_book(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    book = user_data.get("book")

    if not book:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /question")
        await state.clear()
        return

    await callback.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ –∫–Ω–∏–≥–µ *{book}*:",
        parse_mode="Markdown",
        reply_markup=create_navigation_keyboard()
    )
    await state.set_state(QuestionState.waiting_for_question)
    await callback.answer()

@question_router.callback_query(F.data.startswith("rate_"))
async def handle_rating(callback: CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    await state.update_data(rating=rating)

    await callback.message.edit_reply_markup(
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="add_comment")],
                [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="finish_rating")]
            ]
        )
    )
    await callback.answer(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {rating}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å.")


@question_router.callback_query(F.data == "add_comment")
async def handle_add_comment(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_comment")]]
        )
    )
    await state.set_state(QuestionState.waiting_for_comment)
    await callback.answer()


@question_router.callback_query(F.data == "cancel_comment")
async def handle_cancel_comment(callback: CallbackQuery, state: FSMContext):
    await state.set_state(None)
    await callback.message.edit_text("‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    await callback.answer()
    await handle_finish_rating(callback, state)


@question_router.callback_query(F.data == "finish_rating")
async def handle_finish_rating(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    await save_feedback_to_file(user_data)
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    await state.clear()


@question_router.message(QuestionState.waiting_for_comment)
async def save_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    user_data = await state.get_data()
    await save_feedback_to_file(user_data)
    await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!")
    await state.clear()


async def save_feedback_to_file(user_data: dict):
    rating = user_data.get("rating", "–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏")
    book = user_data.get("book")
    question = user_data.get("question")
    response = user_data.get("response")
    comment = user_data.get("comment", "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

    with open("ratings.txt", "a", encoding="utf-8") as file:
        file.write(
            f"–ö–Ω–∏–≥–∞: {book}\n"
            f"–í–æ–ø—Ä–æ—Å: {question}\n"
            f"–û—Ç–≤–µ—Ç: {response}\n"
            f"–û—Ü–µ–Ω–∫–∞: {rating}\n"
            f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
            f"-----------------------------\n"
        )

    if comment != "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è":
        await send_email(book, question, response, rating, comment)


async def send_email(book, question, response, rating, comment):
    subject = f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –∫–Ω–∏–≥—É: {book}"
    body = (
        f"–ö–Ω–∏–≥–∞: {book}\n"
        f"–í–æ–ø—Ä–æ—Å: {question}\n"
        f"–û—Ç–≤–µ—Ç: {response}\n"
        f"–û—Ü–µ–Ω–∫–∞: {rating}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
    )

    msg = MIMEMultipart()
    msg["From"] = SENDER_EMAIL
    msg["To"] = RECEIVER_EMAIL
    msg["Subject"] = subject
    msg.attach(MIMEText(body, "plain"))

    try:
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(None, send_smtp_email, msg)
        logging.info("Email send succefully")
    except Exception as e:
        logging.error(f"Error occured while sending email: {e}")

def send_smtp_email(msg):
    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        server.sendmail(SENDER_EMAIL, RECEIVER_EMAIL, msg.as_string())


@question_router.callback_query(lambda c: c.data == "go_back")
async def callback_go_back(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if "book" in user_data:
        await callback.message.edit_text("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ —Å–Ω–æ–≤–∞:")
        await state.set_state(QuestionState.waiting_for_book)
    else:
        await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()


@question_router.callback_query(lambda c: c.data == "cancel")
async def callback_cancel(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /question")
