from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from difflib import get_close_matches
from bot.states import QuestionState
from bot.gemini_handler import GeminiHandler
from aiogram.types import CallbackQuery
from bot.middlewares import RateLimiter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from responses_templates import book_prompts, PROMPT

from bot.config import parse_args
args = parse_args()
api_keys = args.gemini_api_keys
gemini_handler = GeminiHandler(api_keys)

import logging

question_router = Router()

def create_navigation_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="go_back"),
         InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def create_rating_keyboard():
    buttons = [
        InlineKeyboardButton(text="1", callback_data="rate_1"),
        InlineKeyboardButton(text="2", callback_data="rate_2"),
        InlineKeyboardButton(text="3", callback_data="rate_3"),
        InlineKeyboardButton(text="4", callback_data="rate_4"),
        InlineKeyboardButton(text="5", callback_data="rate_5"),
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    return keyboard

@question_router.message(Command("question"), RateLimiter(limit=5, period=60))
async def ask_book(message: types.Message, state: FSMContext):
    try:
        book_list_markdown = "\n".join(f"- {book}" for book in book_prompts.keys())
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n{book_list_markdown}", reply_markup=create_navigation_keyboard(), parse_mode="Markdown")
        await state.set_state(QuestionState.waiting_for_book)
        logging.info("/question handled")
    except Exception as e:
        logging.exception(f"Error in /question: {e}")

@question_router.message(QuestionState.waiting_for_book, RateLimiter(limit=5, period=60))
async def save_book(message: types.Message, state: FSMContext):
    try:
        book_input = message.text.strip()
        closest_match = get_close_matches(book_input, book_prompts.keys(), n=1, cutoff=0.7)
        if not closest_match:
            await message.answer("–ö–Ω–∏–≥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö.")
            await state.clear()
            return

        book_key = closest_match[0]
        await state.update_data(book=book_key)
        await message.answer(f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:\n{book_prompts[book_key]}", reply_markup=create_navigation_keyboard())
        await state.set_state(QuestionState.waiting_for_question)
        logging.info(f"Book selected: {book_key}")
    except Exception as e:
        logging.exception(f"Error in save_book: {e}")

@question_router.message(QuestionState.waiting_for_question, RateLimiter(limit=5, period=60))
async def save_question(message: types.Message, state: FSMContext):
    try:
        user_data = await state.get_data()
        book = user_data.get("book")
        if not book:
            await message.answer("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /question")
            await state.clear()
            return

        question = message.text.strip()
        if len(question) > 1000:
            await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.")
            await state.clear()
            return

        logging.info(f"User {message.from_user.id} asked: {question[:100]}... about {book}")

        await message.answer(f"‚è≥ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")

        response = await gemini_handler.generate_response(book, question)
        await state.update_data(question=question, response=response)

        if not response or len(response) > 4000:
            response = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."

        try:
            await message.answer(
                f"üìö –û—Ç–≤–µ—Ç –ø–æ –∫–Ω–∏–≥–µ *{book}*:\n\n{response}\n\n–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç—É:",
                parse_mode="Markdown",
                reply_markup=create_rating_keyboard()
            )
        except Exception as e:
            logging.error(f"Error for user {message.from_user.id}: {str(e)}\nParse mode set 'HTML'")
            await message.answer(
                f"üìö –û—Ç–≤–µ—Ç –ø–æ –∫–Ω–∏–≥–µ <b>{book}</b>:\n\n{response}\n\n–ü–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç—É:",
                parse_mode="HTML",
                reply_markup=create_rating_keyboard()
            )

    except Exception as e:
        logging.error(f"Error for user {message.from_user.id}: {str(e)}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.")
    finally:
        #await state.clear()
        pass

@question_router.callback_query(F.data.startswith("rate_"))
async def handle_rating(callback: CallbackQuery, state: FSMContext):
    rating = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    user_data = await state.get_data()
    book = user_data.get("book", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞")
    question = user_data.get("question", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
    response = user_data.get("response", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")

    logging.info(f"User {user_id} rated the response: {rating}")

    with open("ratings.txt", "a", encoding="utf-8") as file:
        file.write(
            f"–ö–Ω–∏–≥–∞: {book}\n"
            f"–í–æ–ø—Ä–æ—Å: {question}\n"
            f"–û—Ç–≤–µ—Ç: {response}\n"
            f"–û—Ü–µ–Ω–∫–∞: {rating}\n"
            f"-----------------------------\n"
        )

    await callback.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É: {rating}!", show_alert=True)

    await callback.message.edit_reply_markup(reply_markup=None)
    await state.clear()


@question_router.callback_query(lambda c: c.data == "go_back")
async def callback_go_back(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    if "book" in user_data:
        await callback.message.edit_text("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ —Å–Ω–æ–≤–∞:")
        await state.set_state(QuestionState.waiting_for_book)
    else:
        await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()


@question_router.callback_query(lambda c: c.data == "cancel")
async def callback_cancel(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å /question")
